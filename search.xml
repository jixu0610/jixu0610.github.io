<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vue-element-admin之增删改查</title>
    <url>/2025/04/20/vue-element-admin%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    <content><![CDATA[<p>介绍： 是一个后台前端解决方案，它基于 <a href="https://github.com/vuejs/vue">vue</a> 和 <a href="https://github.com/ElemeFE/element">element-ui</a>实现。它使用了最新的前端技术栈，内置了 i18 国际化解决方案，<em><strong>动态路由</strong></em>，<em><strong>权限验证</strong></em>，提炼了典型的业务模型，提供了丰富的<em><strong>功能组件</strong></em>，它可以帮助你快速搭建企业级中后台产品原型</p>
<br>

<br>

<h4 id="下面就以用户管理为例来讲讲增删改查吧"><a href="#下面就以用户管理为例来讲讲增删改查吧" class="headerlink" title="下面就以用户管理为例来讲讲增删改查吧"></a>下面就以用户管理为例来讲讲增删改查吧<img src="https://dl4.weshineapp.com/gif/20231204/8c7dd83ead6a7b1cdbd02c3a67b4ef37.gif?f=micro_" alt="img" style="zoom: 25%;" /></h4><p>数据库结构：</p>
<img src="\images\vue\dept表.png" alt="部门表"  />

<img src="\images\vue\user表.png" alt="用户表" style="zoom: 50%;" />

<br>

<p>页面成品：</p>
<img src="\images\vue\增删改查原型.png" alt="增删改查原型" style="zoom:80%;" />

<br>

<p>概述： 总结常见的增删改查细节： </p>
<p>（1） element-ui 数据呈现的形式</p>
<p>（2） 相关函数的调用细节</p>
<br>

<ol>
<li><h4 id="查询："><a href="#查询：" class="headerlink" title="查询："></a><em><strong>查询：</strong></em></h4><p>比较常规，查询表单绑定提交的查询数据模型，点击按钮触发提交方法，方法调用@&#x2F;api中的方法调用后端接口，返回数据，表格绑定指定数据并通过数据的属性一一呈现。</p>
<br>

<p>值得一提的是以下三种情况：</p>
<br>

<h6 id="1-后台返回部门树形结构数据并通过前端呈现，其中涉及到-递归-的使用："><a href="#1-后台返回部门树形结构数据并通过前端呈现，其中涉及到-递归-的使用：" class="headerlink" title="(1) 后台返回部门树形结构数据并通过前端呈现，其中涉及到 递归 的使用："></a><strong>(1) 后台返回部门树形结构数据并通过前端呈现，其中涉及到 递归 的使用：</strong></h6><img src="\images\vue\查询树形结构.png" alt="查询树形结构"  />

<br>

<p>后端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Dept&gt; <span class="title function_">buildTree</span><span class="params">(List&lt;Dept&gt; deptList, <span class="type">int</span> pid)</span> &#123;</span><br><span class="line">           <span class="comment">// 0；父节点 其他：子节点</span></span><br><span class="line">           List&lt;Dept&gt; deptTree = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">           Optional.ofNullable(deptList).orElse(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;())</span><br><span class="line">                   .stream().filter(dept -&gt; dept!=<span class="literal">null</span> &amp;&amp; dept.getPid()==pid)</span><br><span class="line">                   .forEach(dept -&gt; &#123;</span><br><span class="line">                       <span class="type">Dept</span> <span class="variable">dept1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dept</span>();</span><br><span class="line">                       BeanUtils.copyProperties(dept, dept1);</span><br><span class="line">                       dept1.setChildren(buildTree(deptList, dept.getId()));</span><br><span class="line">                       deptTree.add(dept1);</span><br><span class="line">                   &#125;);</span><br><span class="line">           <span class="keyword">return</span> deptTree;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 查询所有的dept表数据 List&lt;Dept&gt; deptList，再添加顶部数据：</span></span><br><span class="line">   <span class="type">Dept</span> <span class="variable">dept</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dept</span>();</span><br><span class="line">   dept.setDeptName(<span class="string">&quot;所有部门&quot;</span>).setId(<span class="number">0</span>).setPid(-<span class="number">1</span>);</span><br><span class="line">   deptList.add(dept);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 构造树形数据结构</span></span><br><span class="line"><span class="keyword">return</span> DeptTreeUtils.buildTree(deptList, -<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<br>

<p>前端：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">el-tree</span> <span class="attr">:data</span>=<span class="string">&quot;treeData&quot;</span> <span class="attr">:props</span>=<span class="string">&quot;defaultProps&quot;</span> <span class="attr">node-key</span>=<span class="string">&quot;id&quot;</span> <span class="attr">:default-expand-all</span>=<span class="string">&quot;true&quot;</span> <span class="attr">empty-text</span>=<span class="string">&quot;暂无数据&quot;</span> @<span class="attr">node-click</span>=<span class="string">&quot;handleNodeClick&quot;</span> <span class="attr">:highlight-current</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-tree</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   props: 呈现的属性</span></span><br><span class="line"><span class="comment">   node-key 的作用：只是告诉组件用哪个字段作为节点的唯一标识（类似主键），用于组件内部管理节点状态（如展开、选中、查找等）。</span></span><br><span class="line"><span class="comment">   handleNodeClick 的作用：点击节点时，它会传递完整的节点数据对象给你</span></span><br><span class="line"><span class="comment">   其他： 默认展开， 校验， 点击事件， 选中高亮显示</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   </span><br><span class="line">   handleNodeClick(data) &#123;</span><br><span class="line">    this.userModel.deptId = data.id;</span><br><span class="line">       this.search();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>好的，如此便可呈现树形结构数据了，点击既可将dept_id赋值给userModel的deptId属性，实现查询功能。</p>
<br></li>
</ol>
<p>此时，便有一个问题了，点击顶级菜单”所有部门”为什么会发生查询所有用户？这就需要向内看看查询的逻辑了：</p>
<p>逻辑很寻常，我设置的所有用户的dept_id都为空，读取mysql数据库的dept_id列时，ResultSet.getInt()会返回0，而顶级菜单的id即为0，所以查询全部用户。😂</p>
<br>

<br>

<h6 id="2-复选框"><a href="#2-复选框" class="headerlink" title="(2) 复选框"></a>(2) 复选框</h6><img src="\images\vue\角色绑定.png" alt="角色绑定"  />

<br>

<p>相对来讲比较简单: 就是点击按钮向后端请求所有选项数据roleList，呈现的属性是roleName, 值（label）为id，默认选项为el-checkbox-group标签的绑定模型roleIds内的元素，点选复选框，可改变roleIds内的元素，以下为前端标签结构：</p>
<br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;角色绑定&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogRoleVisible&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox-group</span> <span class="attr">v-model</span>=<span class="string">&quot;roleIds&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">v-for</span>=<span class="string">&quot;item in roleList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123;item.roleName&#125;&#125;<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;clearBind&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleBindRole&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<p>处理逻辑： 点击角色绑定按钮，向后台发送2个请求 ：（1）所有的角色数据  （2）与用户联系的角色id</p>
<p>点选复选框之后，发送请求携带userId和roleList，后台先删除userId相关联的roleId, 在批量插入用户角色关系。😁</p>
<br>

<br>

<h6 id="（3）分页查找的逻辑"><a href="#（3）分页查找的逻辑" class="headerlink" title="（3）分页查找的逻辑"></a>（3）分页查找的逻辑</h6><br>

<p>单表分页查询的情况下，可以直接使用baseMapper.selectByPage(page, 查询对象)</p>
<br>

<p>多表联合查询的情况下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">使用：</span><br><span class="line">baseMapper.searchByPage(page, autoInfo);</span><br><span class="line"></span><br><span class="line">AutoInfoMapper中定义searchByPage方法</span><br><span class="line">Page<span class="tag">&lt;<span class="name">AutoInfo</span>&gt;</span> searchByPage(Page<span class="tag">&lt;<span class="name">AutoInfo</span>&gt;</span> page, AutoInfo autoInfo);</span><br><span class="line"></span><br><span class="line">Mapper.xml中：</span><br><span class="line">AutoInfo.xml：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;searchByPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coder.rental.entity.AutoInfo&quot;</span>&gt;</span></span><br><span class="line">    select i.*, m.name, b.brand_name </span><br><span class="line">    from auto_info i, auto_maker m, auto_brand b</span><br><span class="line">	where i.maker_id = m.id and i.brand_id = b.id 后续为对象条件查询</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>值得注意的是，这里传入的page对象好像在查询中用不到，应该在返回中使List&lt;.AutoInfo.&gt;自动转化成Page对象吧，挺邪乎的😒</p>
<br>

<br>

<h6 id="（4）根据身份证号确定出生日期-性别和年龄"><a href="#（4）根据身份证号确定出生日期-性别和年龄" class="headerlink" title="（4）根据身份证号确定出生日期,性别和年龄"></a>（4）根据身份证号确定出生日期,性别和年龄</h6><br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;身份证号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;idNum&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;saveCustomer.idNum&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;setCustomerInfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>               </span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;客户年龄&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;saveCustomer.age&quot;</span> <span class="attr">:readonly</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;客户性别&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;gender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">&quot;saveCustomer.gender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-radio-button</span> <span class="attr">:label</span>=<span class="string">&quot;1&quot;</span> <span class="attr">disabled</span>&gt;</span>男<span class="tag">&lt;/<span class="name">el-radio-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-radio-button</span> <span class="attr">:label</span>=<span class="string">&quot;0&quot;</span> <span class="attr">disabled</span>&gt;</span>女<span class="tag">&lt;/<span class="name">el-radio-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;出生日期&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">v-model</span>=<span class="string">&quot;saveCustomer.birthday&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;选择日期&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">value-format</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span> <span class="attr">:readonly</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setCustomerInfo</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//220202199911312661</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//处理性别</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> sex = val.<span class="title function_">charAt</span>(val.<span class="property">length</span> - <span class="number">2</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">saveCustomer</span>.<span class="property">gender</span> = sex % <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取用户身份证上的出生日期</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> birthday = val.<span class="title function_">substring</span>(<span class="number">6</span>, <span class="number">14</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//当前系统时间</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> birthDate = <span class="keyword">new</span> <span class="title class_">Date</span>(birthday.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">4</span>), birthday.<span class="title function_">substring</span>(<span class="number">4</span>, <span class="number">6</span>) - <span class="number">1</span>, birthday.<span class="title function_">substring</span>(<span class="number">6</span>, <span class="number">8</span>))</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> timeDiff = <span class="title class_">Math</span>.<span class="title function_">abs</span>(now.<span class="title function_">getTime</span>() - birthDate.<span class="title function_">getTime</span>())</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (timeDiff &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//计算年龄</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">saveCustomer</span>.<span class="property">age</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeDiff / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span>))</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//计算出生日期</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">saveCustomer</span>.<span class="property">birthday</span> = birthDate<span class="comment">//birthday.substring(0,4)+&quot;-&quot;+birthday.substring(4,6)+&quot;-&quot;+birthday.substring(6,8)</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$forceUpdate()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h6 id="5-日期选择"><a href="#5-日期选择" class="headerlink" title="(5) 日期选择"></a>(5) 日期选择</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">v-</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">model</span>=<span class="string">&quot;violationModel.violationTimeVal&quot;</span> <span class="attr">type</span>=<span class="string">&quot;datetimerange&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">value-format</span>=<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span> <span class="attr">:picker-</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">options</span>=<span class="string">&quot;pickerOptions&quot;</span> <span class="attr">range-separator</span>=<span class="string">&quot;至&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">start-placeholder</span>=<span class="string">&quot;开始日期&quot;</span> <span class="attr">end-placeholder</span>=<span class="string">&quot;结束日期&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;违章时间&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;vtime&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">v-model</span>=<span class="string">&quot;saveViolation.vtime&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">type</span>=<span class="string">&quot;datetime&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;选择日期&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">value-format</span>=<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">后端实体类数据：</span></span><br><span class="line"><span class="comment">@ApiModelProperty(&quot;违章时间&quot;)</span></span><br><span class="line"><span class="comment">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="comment">private LocalDateTime vtime;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h6 id="6-下拉框"><a href="#6-下拉框" class="headerlink" title="(6) 下拉框"></a>(6) 下拉框</h6><p>车辆保养的新增选择车牌，车辆信息新增所属厂商，汽车出租</p>
<br>

<br>

<h6 id="7-侧边栏"><a href="#7-侧边栏" class="headerlink" title="(7) 侧边栏"></a>(7) 侧边栏</h6><ol start="2">
<li><h4 id="添加和修改："><a href="#添加和修改：" class="headerlink" title="添加和修改："></a><em><strong>添加和修改：</strong></em></h4>弹出添加修改对话框，注意延迟校验，表单绑定保存数据模型saveUser，此时有寻常编辑的情况，有点击弹出树形结构，进行点选的情况（上面查询时已经介绍过了）， 这里重点介绍上传头像的情况：</li>
</ol>
<p>对，我们用到的就是aliyun的oss服务，详细的上传和删除请参考<a href="https://jixu0610.github.io/2025/04/20/%E9%98%BF%E9%87%8C%E4%BA%91OSS/#more">阿里云上传和删除图片</a>，我们这里只谈一谈增添头像的逻辑：</p>
<p>点击上传图片，后端返回图片地址，前端利用地址显示图片即可</p>
<p>所以这里只讨论前端：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户头像&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">               <span class="attr">class</span>=<span class="string">&quot;avatar-uploader&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:action</span>=<span class="string">&quot;uploadPath&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:show-file-list</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:on-success</span>=<span class="string">&quot;handleAvatarSuccess&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:before-upload</span>=<span class="string">&quot;beforeAvatarUpload&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:data</span>=<span class="string">&quot;uploadToken&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;saveUser.avatar&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;saveUser.avatar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-plus avatar-uploader-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">uploadPath</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span> + <span class="string">&#x27;rental/oss/upload&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">uploadToken</span>: &#123;<span class="attr">token</span>: <span class="title function_">getToken</span>()&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleAvatarSuccess</span>(<span class="params">res, file</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">saveUser</span>.<span class="property">avatar</span> = res.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$forceUpdate();</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeAvatarUpload</span>(<span class="params">file</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 上传头像之前的验证</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> isJPG = file.<span class="property">type</span> === <span class="string">&#x27;image/jpeg&#x27;</span> || file.<span class="property">type</span> === <span class="string">&#x27;image/png&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> isLt2M = file.<span class="property">size</span>/<span class="number">1024</span>/<span class="number">1024</span> &lt; <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!isJPG) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;上传头像只能是 JPG 或 PNG 格式！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!isLt2M) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;上传头像大小不能超过2MB!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> isJPG &amp;&amp; isLt2M;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ok，正如上所示，有上传地址，携带token令牌，上传之前进行验证，上传成功后图片地址赋值给saveUser.avatar</p>
<br>

<p>这里有一个问题：</p>
<p>以下两个语句的引用逻辑：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span>;</span><br><span class="line"><span class="comment">// VUE_APP_BASE_API 定义在 @/env.development文件下（）, 可以直接通过process引用</span></span><br><span class="line"><span class="attr">uploadPath</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span> + <span class="string">&#x27;rental/oss/upload&#x27;</span>, </span><br><span class="line"><span class="comment">// getToken() 定义在@/utils/auth中</span></span><br><span class="line"><span class="attr">uploadToken</span>: &#123;<span class="attr">token</span>: <span class="title function_">getToken</span>()&#125;,</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 好的，我们来看一下token的获取过程：就是封装的Cookies中获取</span></span><br><span class="line"><span class="comment">// @/utils/auth.js: </span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cookies</span> <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TokenKey</span> = <span class="string">&#x27;Admin-Token&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="title class_">TokenKey</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<ol start="3">
<li><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a><em><strong>删除</strong></em></h4></li>
</ol>
<p>这里的删除可以是指定行的元素删除，也可以是选中数行进行批量删除</p>
<br>

<p>指定行的删除： 卡槽获取对象，将对象传入删除函数根据id进行删除</p>
<p>批量删除： 利用 el-table-column type&#x3D;”selection” 构建基本复选框，点击时触发 el-table @selection-change事件</p>
<p>下面来详细看看批量删除的元素勾选：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">multipleSelection</span>: [],  <span class="comment">// 获取删除的批量id</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleSelectionChange</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">multipleSelection</span> = [];</span></span><br><span class="line"><span class="language-javascript">            val.<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">multipleSelection</span>.<span class="title function_">push</span>(element.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>每次点击的时候要清除multipleSelection</p>
<br>

<p>ok了，一些常见的增删改查操作已经总结完毕，如果后续出现新的情况，会进行补充的🎃</p>
]]></content>
      <categories>
        <category>vue</category>
        <category>vue-element-admin</category>
        <category>java项目</category>
        <category>汽车租赁管理系统</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue-element-admin</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Page + Hexo 创建个人博客</title>
    <url>/2025/04/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>介绍： 编写md格式文件，使用 <em><strong>Hexo</strong></em> 渲染成静态网页文件，用<em><strong>git</strong></em>上传至github仓库（仓库名即用户名），可由 <em><strong>仓库名.github.io</strong></em> 地址访问。</p>
<br>

<h4 id="一-初次使用："><a href="#一-初次使用：" class="headerlink" title="一. 初次使用："></a>一. 初次使用：</h4><ol>
<li><p>环境准备：</p>
<p>git</p>
<p>node（版本14.0.0+）</p>
<br>
</li>
<li><p>Hexo安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>初始化框架, 创建工作文件夹test:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init test;</span><br><span class="line">npm install; // 安装框架所需</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>生成静态网页</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li>
</ol>
<br>

<ol start="5">
<li><p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<br>

<p>​	访问 127.0.0.1:4000 查看页面效果。</p>
<br>

<br>

<h4 id="二-Next主题"><a href="#二-Next主题" class="headerlink" title="二. Next主题:"></a>二. Next主题:</h4><ol>
<li><p>下载next主题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd test</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>_config.yml 文件找到 theme, 更改：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>选择主题形式： 在&#x2F;theme&#x2F;next&#x2F;_config.yml找到 scheme</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment"># scheme: Mist</span></span><br><span class="line"><span class="comment"># scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span>  <span class="comment"># 推荐</span></span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>设置语言：在_config.yml中找到 language， 设置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span> <span class="comment"># 默认en</span></span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>设置菜单： 在&#x2F;theme&#x2F;next&#x2F;_config.yml找到 menu</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span>              <span class="comment"># 首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span>  <span class="comment"># 归档</span></span><br><span class="line">  <span class="comment">#about: /about</span></span><br><span class="line">  <span class="comment">#categories: /categories</span></span><br><span class="line">  <span class="comment">#tags: /tags</span></span><br><span class="line">  <span class="comment">#commonweal: /404.html</span></span><br></pre></td></tr></table></figure>

<br>

<p><img src="/images/menu.png" alt="menu"></p>
<br>

<p>若你的站点运行在子目录中，请将链接前缀的 &#x2F; 去掉</p>
</li>
</ol>
<br>

<br>

<h4 id="三-修改个人信息"><a href="#三-修改个人信息" class="headerlink" title="三. 修改个人信息"></a>三. 修改个人信息</h4><ol>
<li><p>编辑_config.yml， 设置author，title,  subtitle, description等:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">yourTitle</span>   <span class="comment">#标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span>       <span class="comment">#副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">you</span>        <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span>  <span class="comment">#语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> <span class="comment">#时区</span></span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>设置头像： 在source文件夹下创建 image文件夹，放置图片</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="string">/images/博客头像.png</span>  <span class="comment"># /images/图片.png   图片的格式 </span></span><br></pre></td></tr></table></figure>

<br></li>
</ol>
<br>

<h4 id="四-编写文章"><a href="#四-编写文章" class="headerlink" title="四. 编写文章"></a>四. 编写文章</h4><p>编写md格式文章，放在 source&#x2F;_posts 文件夹下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;post title&quot; # 创建文章，默认md格式</span><br><span class="line">host g  # 全部原文章渲染到public静态目录</span><br></pre></td></tr></table></figure>

<br>

<br>

<h4 id="五-上传至github"><a href="#五-上传至github" class="headerlink" title="五. 上传至github"></a>五. 上传至github</h4><ol>
<li><p>安装一键部署插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>_config.yml中添加部署配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:&lt;username&gt;/&lt;project&gt;</span></span><br><span class="line">  <span class="comment">#example,https://github.com/hexojs/hexojs.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span>  <span class="comment"># 上传github仓库分支，可更改</span></span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>上传：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>访问地址：yourUserName.github.io  (注意你上传的仓库名和你的github的用户名必须相同！)</p>
</li>
</ol>
<br>

<p>恭喜你已经创建了属于你的博客。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>创建博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云OSS</title>
    <url>/2025/04/20/%E9%98%BF%E9%87%8C%E4%BA%91OSS/</url>
    <content><![CDATA[<p>介绍： 有时，我们将图片等静态资源存储在服务器上，但当图片多时，网站加载图片等静态资源的时间会变长，服务体检就会打折扣，这时我们就可以借助阿里云等云服务的对象存储服务直接上传图片，在网站html页面引用图片地址即可。<img src="https://dl4.weshineapp.com/gif/20161214/413c2f733a5e0583da34fd30c3a3d223.gif?f=micro_5bCP6KGo5oOF" alt="img"></p>
<br>

<br>

<p>springboot如何介入aliyun OSS服务呢?  那么现在开始吧</p>
<br>

<ol>
<li><p>首先是在 springboot 配置文件 application.yml 中加入以下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aliyun:</span></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">access-key-id:</span></span><br><span class="line">    <span class="attr">access-key-secret:</span></span><br><span class="line">    <span class="attr">bucket-name:</span></span><br></pre></td></tr></table></figure>

<p>需要注册阿里云的OSS服务才可以有bucket-name和endpoint, 身份认证的两个属性：access-key-id 和 access-key-secret</p>
<br>

<br>
</li>
<li><p>再把它封装成一个对象OSSConfig, 方便操作👍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OSSConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.access-key-id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.access-key-secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.bucket-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<br>
</li>
<li><p>再就是创建一个接口及其实现类，完成图片的上传和删除逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先创建IOssService，定义上传和删除方法</span></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClientBuilder;</span><br><span class="line"><span class="keyword">import</span> com.coder.rental.config.OSSConfig;</span><br><span class="line"><span class="keyword">import</span> com.coder.rental.service.IOssService;</span><br><span class="line"><span class="keyword">import</span> com.coder.rental.utils.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IOssService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OSSConfig ossConfig;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> FileUtils.getFileName(originalFilename);</span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(</span><br><span class="line">                ossConfig.getEndpoint(),</span><br><span class="line">                ossConfig.getAccessKeyId(),</span><br><span class="line">                ossConfig.getAccessKeySecret()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 完成上传处理</span></span><br><span class="line">            ossClient.putObject(ossConfig.getBucketName(), fileName, file.getInputStream());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;https://&quot;</span> + ossConfig.getBucketName() + <span class="string">&quot;.&quot;</span> +  ossConfig.getEndpoint() + <span class="string">&quot;/&quot;</span> + fileName;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;上传文件失败&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                ossClient.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(</span><br><span class="line">                ossConfig.getEndpoint(),</span><br><span class="line">                ossConfig.getAccessKeyId(),</span><br><span class="line">                ossConfig.getAccessKeySecret()</span><br><span class="line">        );</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;https://&quot;</span> + ossConfig.getBucketName() + <span class="string">&quot;.&quot;</span> + ossConfig.getEndpoint() + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> StrUtil.removePrefix(url, host);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ossClient.deleteObject(ossConfig.getBucketName(), objectName);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                ossClient.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<br>
</li>
<li><p>最后就是 controller 层的调用了</p>
<br>

<br>

<p>就是这么简单<img src="https://dl4.weshineapp.com/gif/20220109/04099f6774f94c95bfd233c841b3acc7.gif?f=micro_" alt="img" style="zoom:25%;" /></p>
</li>
</ol>
]]></content>
      <categories>
        <category>云服务</category>
        <category>阿里云OSS</category>
      </categories>
      <tags>
        <tag>阿里云OSS</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-element-admin初始搭建</title>
    <url>/2025/04/23/vue-element-admin%E5%88%9D%E5%A7%8B%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>介绍： 初始搭建是在后端的访问权限模块完成之后进行的，主要内容为登录退出，菜单路由导航这两部分，构建一个大体框架，之后内容的编写就只需注重内容本身即可。</p>
<br>

<h3 id="一-vue-element-admin安装"><a href="#一-vue-element-admin安装" class="headerlink" title="一. vue-element-admin安装"></a>一. <a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/#%E5%AE%89%E8%A3%85">vue-element-admin安装</a></h3><br>

<br>

<h3 id="二-后端"><a href="#二-后端" class="headerlink" title="二.后端"></a>二.后端</h3><ol>
<li><p>用户登录获取该用户信息(id, 用户名, 头像, 角色名称数组)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getUserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 从securityContextHolder上下文中获取认证信息</span></span><br><span class="line">    <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span></span><br><span class="line">        SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    <span class="keyword">if</span> (authentication == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail().setMessage(<span class="string">&quot;认证信息为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) authentication.getPrincipal();</span><br><span class="line">    <span class="comment">// 查询用户角色名称</span></span><br><span class="line">    <span class="comment">/*List&lt;String&gt; list = userService.selectRoleName(user.getId());</span></span><br><span class="line"><span class="comment">       Object[] array = list.toArray(); */</span><span class="comment">// 将角色名称列表转换为数组</span></span><br><span class="line">    List&lt;Permission&gt; permissionList = user.getPermissionList();</span><br><span class="line">    Object[] array = permissionList.stream().filter(Objects::nonNull)</span><br><span class="line">        .map(Permission::getPermissionCode)</span><br><span class="line">        .toArray();</span><br><span class="line">    <span class="comment">// 创建并填充用户信息视图对象</span></span><br><span class="line">    <span class="type">UserInfoVo</span> <span class="variable">userInfoVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfoVo</span>(user.getId(),</span><br><span class="line">                                           user.getUsername(),</span><br><span class="line">                                           user.getAvatar(), user.getNickname(), array);</span><br><span class="line">    <span class="keyword">return</span> Result.success(userInfoVo).setMessage(<span class="string">&quot;获取用户信息成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意角色数组要用 Permission 中的 permissionCode</p>
<br>
</li>
<li><p>参照<strong>router-&gt;index.js</strong>中的路由选项，编写<strong>routerVO</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/error&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;noRedirect&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ErrorPages&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;Error Pages&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;404&#x27;</span>,</span><br><span class="line">      <span class="attr">roles</span>: [<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;editor&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;401&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/error-page/401&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Page401&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;401&#x27;</span>, <span class="attr">noCache</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;404&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/error-page/404&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Page404&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;404&#x27;</span>, <span class="attr">noCache</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_EMPTY)</span> <span class="comment">// 注意加上该注解，不序列化空children</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RouteVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="keyword">private</span> String component;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Boolean alwaysShow;</span><br><span class="line">    <span class="keyword">private</span> Meta meta;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;RouteVO&gt; children;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Meta</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String title;</span><br><span class="line">        <span class="keyword">private</span> String icon;</span><br><span class="line">        <span class="keyword">private</span> String[] roles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>根据权限列表，经过路由菜单工具类获取路由信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/menuList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getMenuList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前用户信息</span></span><br><span class="line">    <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span></span><br><span class="line">        SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    <span class="keyword">if</span> (authentication == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail().setMessage(<span class="string">&quot;认证信息为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) authentication.getPrincipal();</span><br><span class="line">    <span class="comment">//获取用户的权限列表</span></span><br><span class="line">    List&lt;Permission&gt; permissionList = user.getPermissionList();</span><br><span class="line">    <span class="comment">//获取用户的菜单</span></span><br><span class="line">    <span class="comment">//将permission_type为2的按钮移除，不需要生成对应的菜单</span></span><br><span class="line">    permissionList.removeIf(permission -&gt;</span><br><span class="line">                            Objects.equals(permission.getPermissionType(), <span class="number">2</span>));</span><br><span class="line">    List&lt;RouteVO&gt; routeVOList =</span><br><span class="line">        RouteTreeUtils.buildRouteTree(permissionList, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> Result.success(routeVOList).setMessage(<span class="string">&quot;获取菜单列表成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>退出登录接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="params">                     response)</span>&#123;</span><br><span class="line">    String token=request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isEmpty(token))&#123;</span><br><span class="line">        token=request.getParameter(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span></span><br><span class="line">        SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    <span class="keyword">if</span> (authentication!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//用户一旦登出系统，则清除redis中的token</span></span><br><span class="line">        redisUtils.del(<span class="string">&quot;token:&quot;</span>+token);</span><br><span class="line">        <span class="type">SecurityContextLogoutHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">SecurityContextLogoutHandler</span>();</span><br><span class="line">        handler.logout(request,response,authentication);</span><br><span class="line">        <span class="keyword">return</span> Result.success().setMessage(<span class="string">&quot;登出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.fail().setMessage(<span class="string">&quot;登出失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>这个时候后端就完成了，总结以下后端完成内容吧🎃：</p>
<p>（1）获取用户信息  （2）获取路由信息   （3）退出登录</p>
</li>
</ol>
<br>

<br>

<h3 id="三-前端之登录退出"><a href="#三-前端之登录退出" class="headerlink" title="三.前端之登录退出"></a>三.前端之登录退出</h3><br>

<ol>
<li>好的，我们现在开始前端部分，首先是前端登录：先稍微修改一下前端页面😁，然后就有一个问题了，怎么让前端发送登录请求到后端呢？我们来解决：</li>
</ol>
<br>

<p>（1）先修改以下开发环境**.env.development<strong>和生产环境</strong>.env.production**的文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">VUE_APP_BASE_API</span> = <span class="string">&#x27;http://localhost:8888/&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<p>（2） 然后修改发送请求的文件<strong>request.js</strong>:</p>
<br>

<p>​	安装qs依赖，实现参数序列化处理：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install qs</span><br></pre></td></tr></table></figure>

<br>

<p>​	修改service，用 <strong>process.env.VUE_APP_BASE_API</strong> 来表示要发送的服务器及其端口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>, <span class="comment">// url = base url + request url</span></span><br><span class="line">    <span class="comment">// withCredentials: true, // send cookies when cross-domain requests</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span> <span class="comment">// request timeout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下来就是request拦截, 在Header中放置token</span></span><br><span class="line"><span class="comment">// response拦截，判断响应code来做处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义requestHttp,用于发送请求：get, post, put, delete, upload, login</span></span><br><span class="line"><span class="comment">// 下面以post为例：</span></span><br><span class="line"><span class="title function_">post</span>(<span class="params">url,params</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> service.<span class="title function_">post</span>(</span><br><span class="line">        url, params, &#123;</span><br><span class="line">            <span class="attr">transformRequest</span>: [<span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(params)</span><br><span class="line">            &#125;],</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// service的post方法发送的url参数和自身定义时的baseUrl相结合。</span></span><br></pre></td></tr></table></figure>

<br>

<p>好的，我们来总结一下发送请求的问题吧，发送请求的方式是<strong>Axios</strong>，定义<strong>service</strong>时设置<strong>baseURL</strong>为服务器及其端口，后续调用service方法请求时，传入请求路径（在baseURL的基础上）和参数即可。</p>
<br>

<p>（3）我们搞清楚请求路径之后就可以在<strong>api&#x2F;user.js</strong>中定义请求方法用于获取用户信息和路由信息了</p>
<br>

<p>（4） 登录的最后部分，还有一些小细节需要修改╰(<em>°▽°</em>)╯： 返回的token需要存储呀：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getToken, setToken, removeToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">token</span>: <span class="title function_">getToken</span>(),</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">avatar</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">introduction</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">roles</span>: [],</span><br><span class="line">  <span class="attr">createrId</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="attr">SET_TOKEN</span>: <span class="function">(<span class="params">state, token</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">token</span> = token</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user login</span></span><br><span class="line"><span class="title function_">login</span>(<span class="params">&#123; commit &#125;, userInfo</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = userInfo</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">login</span>(&#123; <span class="attr">username</span>: username.<span class="title function_">trim</span>(), <span class="attr">password</span>: password &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; token &#125; = response</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_TOKEN&#x27;</span>, token)</span><br><span class="line">            <span class="title function_">setToken</span>(token)</span><br><span class="line">            <span class="title function_">resolve</span>()</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>登录成功后，<strong>state</strong>就可以存储user信息了</p>
<br>

<br>

<ol start="2">
<li><p>那么接下来就是退出登录了:</p>
<br>

<p>（1）在 api&#x2F;user.js 中定义退出方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">logout</span>(<span class="params">param</span>)&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">await</span> requestHttp.<span class="title function_">post</span>(<span class="string">&#x27;/rental/auth/logout&#x27;</span>,param)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>（2）在 utils&#x2F;auth.js 中定义清除 sessionStorage 方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">removeSessionStoreage</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">sessionStorage</span>.<span class="title function_">clear</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>（3） 修改 layout&#x2F;components&#x2F;Navbar.vue 文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;logout&#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;getToken, removeToken, removeSessionStorage&#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//修改logout方法</span></span><br><span class="line">     <span class="comment">//await this.$store.dispatch(&#x27;user/logout&#x27;)</span></span><br><span class="line">     <span class="comment">//this.$router.push(`/login?redirect=$&#123;this.$route.fullPath&#125;`)</span></span><br><span class="line">     <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;确定退出系统吗?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">       <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">       <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">       <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="title function_">async</span>() =&gt; &#123;</span><br><span class="line">       <span class="keyword">let</span> token = &#123; <span class="attr">token</span>: getToken &#125;    <span class="comment">// 获取token</span></span><br><span class="line">       <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">logout</span>(token)      <span class="comment">// 调用退出登录方法</span></span><br><span class="line">       <span class="keyword">if</span> (res.<span class="property">success</span>)&#123;</span><br><span class="line">         <span class="title function_">removeToken</span>()	<span class="comment">// 去除token</span></span><br><span class="line">         <span class="title function_">removeSessionStoreage</span>()    <span class="comment">// 清除SessionStoreage    </span></span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">`/login?redirect=<span class="subst">$&#123;<span class="variable language_">this</span>.$route.fullPath&#125;</span>`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">         <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">         <span class="attr">message</span>: <span class="string">&#x27;已取消退出&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="前端之动态路由菜单"><a href="#前端之动态路由菜单" class="headerlink" title="前端之动态路由菜单"></a>前端之动态路由菜单</h3><p>登录时获取了用户信息和路由信息，其中用户信息存储在 store&#x2F;modules&#x2F;user.js 的state中，而获取的路由信息得转化为动态路由菜单，好的，现在我们来开始这一部分：</p>
<br>

<ol>
<li><p>在 api&#x2F;user.js 中，写获取菜单的方法:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getMenuList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> requestHttp.<span class="title function_">get</span>(<span class="string">&#x27;/rental/auth/menuList&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>修改 store&#x2F;permission.js 文件，实现动态路由菜单</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="title function_">generateRoutes</span>(<span class="params">&#123; commit &#125;, roles</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">getMenuList</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (response.<span class="property">code</span> === <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="keyword">const</span> accessedRoutes = <span class="title function_">filterAsyncRoutes</span>(response.<span class="property">data</span>, roles)</span><br><span class="line">                    <span class="title function_">commit</span>(<span class="string">&#x27;SET_ROUTES&#x27;</span>, accessedRoutes)</span><br><span class="line">                    <span class="title function_">resolve</span>(accessedRoutes)  <span class="comment">// 进行索引导航</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(response.<span class="property">msg</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(</span><br><span class="line">                <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(error)</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时getMenuList()的response.data要经过filterAsyncRoutes递归处理</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">filterAsyncRoutes</span>(<span class="params">routes, roles</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    routes.<span class="title function_">forEach</span>(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> tmp = &#123; ...route &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">hasPermission</span>(roles, tmp)) &#123;</span><br><span class="line">            <span class="keyword">let</span> component = tmp.<span class="property">component</span>  <span class="comment">// 组件对应permission中的route_url</span></span><br><span class="line">            <span class="keyword">if</span> (route.<span class="property">component</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (component === <span class="string">&#x27;Layout&#x27;</span>) &#123;</span><br><span class="line">                    tmp.<span class="property">component</span> = <span class="title class_">Layout</span>  <span class="comment">// 默认布局已经存在该组件</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tmp.<span class="property">component</span> = <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">`@/views<span class="subst">$&#123;component&#125;</span>`</span>],</span><br><span class="line">                                                         resolve)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmp.<span class="property">children</span>) &#123;</span><br><span class="line">                tmp.<span class="property">children</span> = <span class="title function_">filterAsyncRoutes</span>(tmp.<span class="property">children</span>, roles)</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="title function_">push</span>(tmp)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="attr">SET_ROUTES</span>: <span class="function">(<span class="params">state, routes</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">addRoutes</span> = routes</span><br><span class="line">        state.<span class="property">routes</span> = constantRoutes.<span class="title function_">concat</span>(routes)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 经过处理后的routes保存在route的routes属性中</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line"> <span class="attr">routes</span>: [],</span><br><span class="line"> <span class="attr">addRoutes</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>好，我们来总结一下动态索引菜单是如何进行的：向后端请求得到数据后，用filterAsyncRoutes递归处理索引路径 component, 就可以进行存储和转换了。</p>
<br>

<br>
</li>
<li><p>最后，还有一些细节需要修改：</p>
<p>（1）修改router-&gt;index.js文件，注释掉document和guide菜单，并将dashboard改成”首页”字样</p>
<p>（2）修改utils-&gt;validate.js文件，对用户名的校验</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">validUsername</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="comment">//const valid_map = [&#x27;admin&#x27;, &#x27;editor&#x27;]</span></span><br><span class="line">    <span class="keyword">return</span> str.<span class="property">length</span>&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）修改layout-&gt;components-&gt;Navbar.vue文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//修改logout方法</span></span><br><span class="line">     <span class="comment">//await this.$store.dispatch(&#x27;user/logout&#x27;)</span></span><br><span class="line">     <span class="comment">//this.$router.push(`/login?redirect=$&#123;this.$route.fullPath&#125;`)</span></span><br><span class="line">     <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;确定退出系统吗?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">       <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">       <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">       <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="title function_">async</span>() =&gt; &#123;</span><br><span class="line">       <span class="keyword">let</span> token = &#123; <span class="attr">token</span>: getToken &#125;    <span class="comment">// 获取token</span></span><br><span class="line">       <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">logout</span>(token)      <span class="comment">// 调用退出登录方法</span></span><br><span class="line">       <span class="keyword">if</span> (res.<span class="property">success</span>)&#123;</span><br><span class="line">         <span class="title function_">removeToken</span>()	<span class="comment">// 去除token</span></span><br><span class="line">         <span class="title function_">removeSessionStoreage</span>()    <span class="comment">// 清除SessionStoreage    </span></span><br><span class="line">         <span class="comment">// this.$router.push(`/login?redirect=$&#123;this.$route.fullPath&#125;`)</span></span><br><span class="line">         <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">         <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">         <span class="attr">message</span>: <span class="string">&#x27;已取消退出&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<br>

<br>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>目前已经完成了项目的前端大体框架，后续在进行<strong>访问权限模块</strong>和<strong>项目各部分模块之间的关系</strong>总结。</p>
<p>(<em>&#x2F;ω＼</em>)</p>
]]></content>
      <categories>
        <category>vue</category>
        <category>vue-element-admin</category>
        <category>java项目</category>
        <category>汽车租赁管理系统</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-element-admin之财务管理</title>
    <url>/2025/04/24/%E7%BB%9F%E8%AE%A1%E5%9B%BE_excel%E5%AF%BC%E5%87%BA_%E5%8F%91%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<h5 id="介绍：在这一部分，我们可以学习三个小知识：-echarts-统计图，-excel-导出-和-发送邮件。"><a href="#介绍：在这一部分，我们可以学习三个小知识：-echarts-统计图，-excel-导出-和-发送邮件。" class="headerlink" title="介绍：在这一部分，我们可以学习三个小知识： echarts 统计图， excel 导出 和 发送邮件。"></a>介绍：在这一部分，我们可以学习三个小知识： <em><strong>echarts</strong></em> 统计图， <em><strong>excel</strong></em> 导出 和 发送邮件。</h5><br>

<br>

<h5 id="一-echarts统计图"><a href="#一-echarts统计图" class="headerlink" title="一.  echarts统计图"></a>一.  echarts统计图</h5><br>

<p><a href="https://echarts.apache.org/examples/zh/">echarts中文官网</a>, 这里我们只看重叠折线统计图，简要思路就是 x轴数据为小时或日期数组，而series的数组为所展现的数据的大小，这两部分的数组索引一一对应。</p>
<br>

<p>示例效果：</p>
<img src="\images\vue\数据统计之折线图.png" alt="折线图" style="zoom: 50%;"/>

<br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-card</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;Mychart&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; width: &#x27;80%&#x27;, height: &#x27;400px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Mychart</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">xArray</span>: [],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">y1Array</span>: [],</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mouted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">initRentalChart</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">initRentalChart</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">Mychart</span> = echarts.<span class="title function_">init</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">Mychart</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">Mychart</span>.<span class="title function_">setOption</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">text</span>: <span class="string">&#x27;日报出租数据统计&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">subtext</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleDateString</span>(),</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">tooltip</span>: &#123; <span class="comment">// 一些例如点选的效果</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">axisPointer</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">type</span>: <span class="string">&#x27;shadow&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">data</span>: [<span class="string">&#x27;出租数量&#x27;</span>] <span class="comment">// series内容数组</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">grid</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">left</span>: <span class="string">&#x27;3%&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">right</span>: <span class="string">&#x27;4%&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">bottom</span>: <span class="string">&#x27;3%&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">containLabel</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">toolbox</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">show</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">orient</span>: <span class="string">&#x27;vertical&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">left</span>: <span class="string">&#x27;right&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">top</span>: <span class="string">&#x27;center&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">feature</span>: &#123; <span class="comment">// 侧边栏：数据展示，图的切换，保存图片</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">mark</span>: &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">dataView</span>: &#123;<span class="attr">readOnly</span>: <span class="literal">false</span>, <span class="attr">show</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">magicType</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">type</span>: [<span class="string">&#x27;line&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">saveAsImage</span>: &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">boundaryGap</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">axisTick</span>: &#123;<span class="attr">show</span>: <span class="literal">false</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">xArray</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">yAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;出租数量&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// type: &#x27;bar&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// stack: &#x27;Total&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">barGap</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">y1Array</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<br>

<h5 id="二-excel导出"><a href="#二-excel导出" class="headerlink" title="二. excel导出"></a>二. excel导出</h5><br>

<p>将对象数组转化为excel表，属性作为表头，可以起别名哦🎃。需要 <em><strong>hutool</strong></em> 依赖包来完成：</p>
<br>

<p>导出效果：</p>
<img src="\images\vue\excel导出效果.png" alt="excel导出效果"/>

<br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.poi.excel.ExcelUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.poi.excel.ExcelWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;exportExcel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">export</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    List&lt;AutoBrand&gt; list=autoBrandService.list();</span><br><span class="line">    <span class="comment">// 列表转化为excel文件</span></span><br><span class="line">    ExcelWriter writer= ExcelUtil.getWriter(<span class="literal">true</span>);</span><br><span class="line">    writer.addHeaderAlias(<span class="string">&quot;brandName&quot;</span>,<span class="string">&quot;品牌名称&quot;</span>);</span><br><span class="line">    writer.addHeaderAlias(<span class="string">&quot;deleted&quot;</span>,<span class="string">&quot;是否删除&quot;</span>);</span><br><span class="line">    writer.write(list,<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 设置response格式和传输的文件名</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-</span></span><br><span class="line"><span class="string">                            officedocument.spreadsheetml.sheet;charset:utf-8&quot;</span>);</span><br><span class="line">    String fileName= URLEncoder.encode(<span class="string">&quot;汽车品牌&quot;</span>,StandardCharsets.UTF_8);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;</span></span><br><span class="line"><span class="string">                       filename=&quot;</span>+fileName+<span class="string">&quot;.xlsx&quot;</span>);                                      	  writer.flush(response.getOutputStream(),<span class="literal">true</span>);</span><br><span class="line">    writer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<br>

<br>

<h5 id="三-发邮件"><a href="#三-发邮件" class="headerlink" title="三. 发邮件"></a>三. 发邮件</h5><br>

<ol>
<li><p>进行<strong>application.yml</strong>配置:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span> <span class="comment"># smtp为简单邮件协议</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">25</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">a838211536@163.com</span> <span class="comment"># 邮箱名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">QNg9GeYBpeybQRMT</span> <span class="comment"># 授权密码</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail.smtp.auth:</span> <span class="literal">true</span> <span class="comment"># 启用认证</span></span><br><span class="line">      <span class="attr">mail.smtp.starttls.enable:</span> <span class="literal">true</span>  <span class="comment"># 启用TLS</span></span><br><span class="line">      <span class="attr">mail.smtp.starttls.required:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>定义<strong>IMailService</strong>接口及其实习类<strong>MailServiceImpl</strong>, 需注意：如果<strong>javaMailSender</strong>无法自动注入的话，还需要自己写一个产生 javaMailSender bean 的配置类。</p>
<br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IMailService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mail 邮件数据对象，包含以下关键字段：</span></span><br><span class="line"><span class="comment">     *             - from:    发件人地址</span></span><br><span class="line"><span class="comment">     *             - to:      收件人地址（支持多个）</span></span><br><span class="line"><span class="comment">     *             - subject: 邮件主题</span></span><br><span class="line"><span class="comment">     *             - content: 邮件正文内容</span></span><br><span class="line"><span class="comment">     * 实现说明：</span></span><br><span class="line"><span class="comment">     * 1. 使用SimpleMailMessage构建基础邮件信息</span></span><br><span class="line"><span class="comment">     * 2. 设置发件人、收件人、主题、正文等核心字段</span></span><br><span class="line"><span class="comment">     * 3. 将发件人同时添加到抄送列表（需确认是否符合业务需求）</span></span><br><span class="line"><span class="comment">     * 4. 通过JavaMailSender执行邮件发送</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MailException 当邮件发送失败时抛出相关异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMail</span><span class="params">(MailVO mail)</span> <span class="keyword">throws</span> MailException &#123;</span><br><span class="line">        <span class="comment">// 构建基础邮件消息对象</span></span><br><span class="line">        <span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置邮件基本信息</span></span><br><span class="line">        message.setFrom(mail.getFrom());</span><br><span class="line">        message.setTo(mail.getTo());</span><br><span class="line">        message.setSubject(mail.getSubject());</span><br><span class="line">        message.setText(mail.getContent());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置发件人同时作为抄送（根据业务需求可能需要调整）</span></span><br><span class="line">        message.setCc(mail.getFrom());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行邮件发送操作</span></span><br><span class="line">        javaMailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<p>好的，到这里就可以进行邮件发送操作了，但是如何进行<strong>定时发送邮件</strong>呢？</p>
<br>
</li>
<li><p>定时发送邮件, 这里就以财务管理的日报收入部分为例吧：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMailUtil</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IFinanceService financeService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IMailService mailService;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/10 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sbf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        sbf.append(<span class="string">&quot;今日收入：&quot;</span>)</span><br><span class="line">                .append(<span class="string">&quot;，租金收入：&quot;</span>)</span><br><span class="line">                .append(financeService.sumRentPay().getCountActualPayable())</span><br><span class="line">                .append(<span class="string">&quot;，押金收入：&quot;</span>)</span><br><span class="line">                .append(financeService.sumDeposit());</span><br><span class="line">        <span class="type">MailVO</span> <span class="variable">mailVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MailVO</span>();</span><br><span class="line">        <span class="comment">// 设置四部分：from, to, subject, content</span></span><br><span class="line">        mailVO.setFrom(from);</span><br><span class="line">        mailVO.setTo(<span class="string">&quot;a838211536@163.com&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> LocalDate.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>));</span><br><span class="line">        mailVO.setSubject(date + <span class="string">&quot;今日收入&quot;</span>);</span><br><span class="line">        mailVO.setContent(sbf.toString());</span><br><span class="line">        mailService.sendMail(mailVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>好的，这样看来，邮件发送就简单了：（1）<strong>javaMailSender</strong>的配置     （2）填写发送信息对象</p>
</li>
</ol>
]]></content>
      <categories>
        <category>vue</category>
        <category>vue-element-admin</category>
        <category>java项目</category>
        <category>汽车租赁管理系统</category>
      </categories>
      <tags>
        <tag>echarts统计图</tag>
        <tag>excel导出</tag>
        <tag>发邮件</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security</title>
    <url>/2025/04/24/spring-security/</url>
    <content><![CDATA[<p>介绍： 是一套后端访问和权限校验的框架，由一系列的过滤链组成，我们主要操作的是三部分：</p>
<ol>
<li><p>认证核心（UsernamePasswordAuthenticationFilter） </p>
</li>
<li><p>处理认证和授权异常（ExceptionTranslationFilter）</p>
</li>
<li><p>授权核心（FilterSecurity）</p>
</li>
</ol>
<p>我们主要从<strong>认证</strong>和<strong>授权</strong>这两个方面来总结。</p>
<br>

<br>

<br>

<h3 id="一-认证"><a href="#一-认证" class="headerlink" title="一. 认证"></a>一. 认证</h3><br>

<p>认证就是认证核心 <strong>UsernamePasswordAuthenticationFilter</strong> 过滤器来进行的，我们来看一下流程图：</p>
<img src="\images\security\springSecurity认证.png" alt="springSecurity认证">

<br>

<br>

<ol>
<li><h5 id="用户初次登录"><a href="#用户初次登录" class="headerlink" title="用户初次登录"></a>用户初次登录</h5></li>
</ol>
<p>具体流程： </p>
<p>（1）接受用户发送请求携带的username和password，封装为Authentication对象，调用AuthenticaionManager（含有UserDetailsService接口实现类和PasswordEncoder密码校验）</p>
<br>

<p>（2） UserDetailsService接口实现类根据username查询用户信息，及其权限信息，封装到UserDetails对象实现类里。经过PasswordEncoder的接口实现类BCryptPasswordEncoder的校验，通过校验则将UserDetails接口实现类对象封装到Authentication对象里, 不通过则到登录失败处理器返回登录失败信息。</p>
<br>

<p>（3）最后将对象返回并且存入SecurityContextHolder.getContext()里。</p>
<br>

<p>（4）存入并返回token: 通过UsernamePasswordAuthenticationFilter后，到达登录成功处理器LoginSucessHandler，首先根据 Authentication对象 获取 User 对象（封装用户信息和权限信息），再提取 username 和 userId 生成token, outputStream流返回token并将token，及有效时间长度存储到redis中。</p>
<br>

<br>

<p>那便有一个问题了，这个登录成功处理器不在这三大过滤器之内呀，如何配置呢？哈哈，要经过SecurityConfig配置的，事实上，SecurityConfig是配置整个安全过滤器链的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableMethodSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginSuccessHandler loginSuccessHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginFailHandler loginFailHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerAccessDeniedHandler customerAccessDeniedHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerAnonymousEntryPoint customerAnonymousEntryPoint;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerUserDetailsService customerUserDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span>  VerifyTokenFilter verifyTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置安全过滤器链</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 登录前过滤配置</span></span><br><span class="line">        http.addFilterBefore(verifyTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/rental/user/login&quot;</span>) <span class="comment">// 设置登录处理URL</span></span><br><span class="line">                .successHandler(loginSuccessHandler) <span class="comment">// 设置登录成功处理器</span></span><br><span class="line">                .failureHandler(loginFailHandler) <span class="comment">// 设置登录失败处理器</span></span><br><span class="line">                .and()</span><br><span class="line">                .sessionManagement()</span><br><span class="line">                .sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class="comment">// 设置会话创建策略为无状态</span></span><br><span class="line">                .and()</span><br><span class="line">                .authorizeHttpRequests() <span class="comment">// 授权请求配置</span></span><br><span class="line">                .requestMatchers(<span class="string">&quot;/rental/user/login&quot;</span>) <span class="comment">// 匹配登录请求</span></span><br><span class="line">                .permitAll() <span class="comment">// 允许所有请求访问</span></span><br><span class="line">                .anyRequest().authenticated() <span class="comment">// 任何其他请求需要认证</span></span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling() <span class="comment">// 异常处理配置</span></span><br><span class="line">                .authenticationEntryPoint(customerAnonymousEntryPoint) <span class="comment">// 设置未认证入口点</span></span><br><span class="line">                .accessDeniedHandler(customerAccessDeniedHandler) <span class="comment">// 设置访问拒绝处理器</span></span><br><span class="line">                .and()</span><br><span class="line">                .cors() <span class="comment">// 跨域配置</span></span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable() <span class="comment">// 关闭CSRF保护  跨站请求伪造 是一种网络攻击</span></span><br><span class="line">                .userDetailsService(customerUserDetailsService); <span class="comment">// 设置用户详情服务</span></span><br><span class="line">        <span class="keyword">return</span> http.build(); <span class="comment">// 构建并返回安全过滤链</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>我们可以看到配置的内容为：</p>
<p>登录前：UsernamePasswordAuthenticationFilter</p>
<p>登录失败，登录成功</p>
<p>请求访问策略</p>
<p>异常处理</p>
<p>跨域配置</p>
<p>userDetailsService接口实现类</p>
<br>

<br>

<ol start="2">
<li><h5 id="用户携带token登录"><a href="#用户携带token登录" class="headerlink" title="用户携带token登录"></a>用户携带token登录</h5><p>具体流程：用户携带token访问非login的url需要经过verifyTokenFilter验证，token为空，不在redis内，不可解析则抛出认证异常被登录失败处理器捕捉，否则解析username，调用UserDetailsService接口实现类进行查询用户信息和权限信息，封装到Authentication对象并存储到SecurityContextHolder.getContext()里。</p>
<br>

<br>

<br></li>
</ol>
<h3 id="二-授权"><a href="#二-授权" class="headerlink" title="二. 授权"></a>二. 授权</h3><br>

<ol>
<li>前面我们调用UserDetailService实习类loadByUserName方法查询权限信息并且存储到UserDetail的实现类中，我们来看一下权限信息的创建过程：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询权限信息</span></span><br><span class="line">List&lt;Permission&gt; permissionList = permissionService.selectPermissionListByUserId(user.getId());</span><br><span class="line">user.setPermissionList(permissionList);</span><br><span class="line"><span class="comment">// 通过stream流处理，将权限对象转化为权限字符串列表</span></span><br><span class="line">List&lt;String&gt; list = permissionList.stream().filter(Objects::nonNull)</span><br><span class="line">    .map(Permission::getPermissionCode)</span><br><span class="line">    .filter(Objects::nonNull)</span><br><span class="line">    .toList();</span><br><span class="line">String[] array = list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[list.size()]);</span><br><span class="line">List&lt;GrantedAuthority&gt; authorityList = AuthorityUtils.createAuthorityList(array);</span><br><span class="line">user.setAuthorities(authorityList);</span><br></pre></td></tr></table></figure>

<br>

<p>可以看到权限信息是根据permissionCode字段进行创建的。</p>
<br>

<ol start="2">
<li><p>现在已知权限信息的具体格式，接下来看看具体的授权操作，以新增角色为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;sys:role:add&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> Role role)</span> &#123;</span><br><span class="line">    role.setDeleted(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> roleService.save(role) ?  Result.success() : Result.fail();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要 PreAuthorize 注解 和 hasAuthority 方法就好了，方法参数即为上面提交的permissionCode😁</p>
<br>

<p>现在授权大体已经讲完了，另外还可以自己定义hasAuthority方法呦🎃，我们来看看过程吧：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExpressionRoot</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasAuthority</span><span class="params">(String authority)</span>&#123;</span><br><span class="line">        <span class="comment">//获取身份令牌</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="comment">//获取权限</span></span><br><span class="line">        Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities = authentication.getAuthorities();</span><br><span class="line">        <span class="comment">//循环判断</span></span><br><span class="line">        <span class="keyword">for</span> (GrantedAuthority grantedAuthority : authorities) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">role</span> <span class="operator">=</span> grantedAuthority.getAuthority(); <span class="comment">// 获取string</span></span><br><span class="line">            <span class="keyword">if</span> (role.equals(authority)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用：</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ex.hasAuthority(&#x27;&#x27;)&quot;)</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>好了，现在spring security已经总结完了，慢慢学习，思考和总结，熟练了就简单了😁</p>
]]></content>
      <categories>
        <category>java项目</category>
        <category>汽车租赁管理系统</category>
        <category>java框架</category>
        <category>SpringSecurity</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>核心业务逻辑</title>
    <url>/2025/04/25/%E6%A0%B8%E5%BF%83%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91/</url>
    <content><![CDATA[<p>介绍：总结一下汽车租赁管理系统的核心业务逻辑，有四大板块：</p>
<p>（1）权限管理</p>
<p>（2）数据初始</p>
<p>（3）日常业务</p>
<p>（4）财务管理</p>
<p>这样是按照开发顺序来排的：我们的项目首先登录进去，根据登录用户的权限信息显示左侧菜单栏，车辆信息要进行设置，然后可以操作日常业务板块了，最后可以进行财务管理。</p>
<br>

<br>

<h4 id="一-权限管理"><a href="#一-权限管理" class="headerlink" title="一. 权限管理"></a>一. 权限管理</h4><br>

<p>这一模块是我们整个项目的基础，用户—角色—权限资源 这三大部分相关联，当然还有部门—用户，这里主要介绍重点： 权限资源 <strong>permission</strong> 表，表中包含了四大板块所有的权限及其子权限。</p>
<br>

<p>四大板块的权限分级：顶级目录(0), 菜单(1), 操作(2) </p>
<br>

<p>那么就有一个问题了，我们登录用户的权限和这四大板块的权限有啥关系呀？其实可以从访问和操作这两部分出发：</p>
<p>（1）访问： 顶级目录和菜单部分</p>
<img src="\images\权限之访问.png" alt="权限管理"/>

<p>（2）操作：增删改查</p>
<br>

<p>简单点说，就是，你用户的权限包含顶级目录和菜单，就可以在菜单侧边栏显示，再包含相关操作权限，就可以对相关页面进行相关操作。如果用户权限包括权限管理及其所有子权限，就可以在该板块编辑自己或其他用户的权限资源分配。</p>
<br>

<p>了解了具体原理后，我们来看看这四个部分的功能</p>
<ol>
<li><p>部门管理：增删改查</p>
</li>
<li><p>用户管理：增（选择部门，先删关联再添关联），删（删除与角色的关联），改，查，绑定角色</p>
</li>
<li><p>角色管理：增，删（删除与用户关联，删除与权限关联），改，查，设置权限</p>
</li>
<li><p>菜单管理：增删改查</p>
<br>

<br></li>
</ol>
<h4 id="二-数据初始"><a href="#二-数据初始" class="headerlink" title="二. 数据初始"></a>二. 数据初始</h4><br>

<p>这一部分就是设置车辆信息的，效果图如下：</p>
<img src="\images\数据初始.png" alt="数据初始"/>

<p>我们直接来看操作：</p>
<ol>
<li><p>车辆厂商：增删改查</p>
</li>
<li><p>车辆品牌：增（选择车辆厂商），删，改，查（显示厂商名称）</p>
</li>
<li><p>出租类型：增删改查</p>
</li>
<li><p>车辆信息：增（所属厂商，所属品牌），删，改，查</p>
<br>

<br></li>
</ol>
<h4 id="三-日常业务"><a href="#三-日常业务" class="headerlink" title="三. 日常业务"></a>三. 日常业务</h4><br>

<p>这一部分就是重中之重了，效果图如下：</p>
<img src="\images\日常业务.png" alt="日常业务"/>

<p>（1）客户管理：增删改查</p>
<p>（2）汽车出租：管理为出租的汽车，查（汽车status&#x3D;0），出租（填写出租类型和用户信息–&gt; 新增订单, 修改汽车状态status&#x3D;1）</p>
<p>（3）订单详情：查询，订单详情，押金返还</p>
<p>（4）违章处理：增（车牌号，违章信息），删，改，查</p>
<p>（5）车辆保养：增（查询需要保养的车牌号），删，改，查</p>
<p>（6）车辆归还：管理未归还的车辆，显示用户信息，车辆信息，订单信息，出租类型的联合查询。查询，归还</p>
<br>

<br>

<h4 id="四-财务管理"><a href="#四-财务管理" class="headerlink" title="四. 财务管理"></a>四. 财务管理</h4><br>

<p>主要是 echarts 统计图，excel表导出，定期发邮件这三部分，之前已经总结了，请参考：</p>
<p><a href="https://jixu0610.github.io/2025/04/24/%E7%BB%9F%E8%AE%A1%E5%9B%BE_excel%E5%AF%BC%E5%87%BA_%E5%8F%91%E9%82%AE%E4%BB%B6/"><strong>vue-element-admin</strong></a></p>
]]></content>
      <categories>
        <category>java项目</category>
        <category>汽车租赁管理系统</category>
      </categories>
  </entry>
  <entry>
    <title>算法刷题之前言</title>
    <url>/2025/04/25/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E4%B9%8B%E5%89%8D%E8%A8%80/</url>
    <content><![CDATA[<p>介绍：回想自己学习算法的过程，先是大致看完了K神的《Hello算法》java版，又在leetcode中刷了大概30题，ε&#x3D;(´ο｀*)))唉，因为最近做项目把握不准时间，每天最后总是没时间刷题，写下来反思反思，每天刷两题，每天记录记录自己的刷题感受，十天为单位发一篇文章，监督自己的进度顺便总结一下K神的Hello算法部分，加油！</p>
]]></content>
      <categories>
        <category>算法刷题</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>百日筑基之前言</title>
    <url>/2025/04/25/%E7%99%BE%E6%97%A5%E7%AD%91%E5%9F%BA%E4%B9%8B%E5%89%8D%E8%A8%80/</url>
    <content><![CDATA[<p>今天我定一个百日筑基的计划，内容为戒色和锻炼，之前也尝试过，但都以失败告终，回想坚持最长的一段时间，是在戒色文章和戒色口号的熏陶下，原本我以为形式化的意义不大，但事实证明环境对一个人的影响极大，聪明的人总能把自己置于合适的环境，赋予自己驱动力和执行力，当然，这一切的前提是心中宏大的志向。所以，今天我发起百日筑基计划，每天记录自己学习戒色的知识和锻炼的感受，十天为一篇文章，分享自己的心得感悟。</p>
]]></content>
      <categories>
        <category>百日筑基</category>
      </categories>
  </entry>
  <entry>
    <title>Linux部署java环境</title>
    <url>/2025/04/26/Linux%E9%83%A8%E7%BD%B2java%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>远程连接工具<strong>FinalShell</strong>, 功能：ssh, ftp<br><br></p>
<br>

<h5 id="一-安装配置JDK"><a href="#一-安装配置JDK" class="headerlink" title="一. 安装配置JDK"></a>一. 安装配置JDK</h5><br>

<ol>
<li><p>利用FinalShell上传文件功能上传 jdk 安装包</p>
<br>
</li>
<li><p>解压： tar -zxvf 安装包名 -C 解压目录, 这里我的解压目录是 &#x2F;usr&#x2F;local</p>
<br>
</li>
<li><p>配置环境变量：操作文件 &#x2F;etc&#x2F;profile，在文件末尾加上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/jdk1.8.0_171</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>重新加载文件，检查是否配置成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure></li>
</ol>
<br>

<br>

<h5 id="二-安装配置Tomcat"><a href="#二-安装配置Tomcat" class="headerlink" title="二. 安装配置Tomcat"></a>二. 安装配置Tomcat</h5><br>

<ol>
<li><p>利用FinalShell上传安装包并解压到 &#x2F;usr&#x2F;local&#x2F;</p>
<br>
</li>
<li><p>启动tomcat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tomcat文件父目录/bin</span><br><span class="line">sh startup.sh</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>查看tomcat运行进程，有两种方式：</p>
<p>（1）tomcat 启动日志 catalina.out</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 查询日志文件尾部的50行记录</span><br><span class="line">tail -50 /usr/local/apache-tomcat-7.0.57/logs/catalina.out</span><br></pre></td></tr></table></figure>

<p>（2）查看并筛选系统进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef|grep tomcat</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>那么现在进行启动了，就该看看防火墙了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 先开启系统防火墙</span><br><span class="line">systemctl start firewalld</span><br><span class="line">// 再开放8080端口号</span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">// 重新加载防火墙</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>停止Tomcat，两种方式:</p>
<p>（1）tomcat脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// tomcat中的bin目录下：</span><br><span class="line">sh shutdown.sh</span><br></pre></td></tr></table></figure>

<br>

<p>（2）结束tomcat进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep tomcat</span><br><span class="line">kill -9 tomcat进程号</span><br></pre></td></tr></table></figure>

<br>

<br></li>
</ol>
<h5 id="三-安装配置MySQL"><a href="#三-安装配置MySQL" class="headerlink" title="三. 安装配置MySQL"></a>三. 安装配置MySQL</h5><br>

<ol>
<li><p>centos或者RHEL系统自带mariadb数据库，这个数据库和MySQL数据库是冲突的，所以要想保证MySQL成功安装，需要卸载mariadb数据库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 查看指定软件是否存在</span><br><span class="line">rpm -qa | grep mariadb</span><br><span class="line">查询当前系统中安装的名称带mariadb的软件</span><br><span class="line">rpm -qa | grep mysql</span><br><span class="line">查询当前系统中安装的名称带mysql的软件</span><br><span class="line"></span><br><span class="line">// 卸载软件</span><br><span class="line">// 语法: rpm -e --nodeps 软件名称</span><br><span class="line">rpm -e --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>上传并解压, 需要自己创建mysql父目录</p>
<br>
</li>
<li><p>按照顺序安装rpm安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-devel-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-compat-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">yum install net-tools</span><br><span class="line">rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>启动mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld // 查看mysql服务状态</span><br><span class="line">systemctl start mysqld // 启动mysql服务</span><br><span class="line">systemctl stop mysqld // 停止mysql服务</span><br><span class="line"></span><br><span class="line">systemctl enable mysqld // 开机自启</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -tunlp | grep mysql // 查看mysql的服务信息</span><br><span class="line">ps –ef | grep mysql // 查看mysql进程</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>登录</p>
<p>初次登录查看默认生成的密码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /var/log/mysqld.log | grep password</span><br></pre></td></tr></table></figure>

<p>登录并修改密码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line">set global validate_password_length=4; //设置密码长度最低位数</span><br><span class="line">set global validate_password_policy=LOW; //设置密码安全等级低，便于密码可以修改成root</span><br><span class="line">set password = password(&#x27;root&#x27;); // 设置密码为root</span><br><span class="line"></span><br><span class="line">// 开启访问权限</span><br><span class="line">grant all on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<br>

<p>远程登录: 工具：Navicat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 防火墙开启3306端口</span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<br>

<br></li>
</ol>
<h5 id="四-安装配置Redis"><a href="#四-安装配置Redis" class="headerlink" title="四. 安装配置Redis"></a>四. 安装配置Redis</h5><br>

<ol>
<li><p>安装redis：</p>
<br>

<p>下载地址：<a href="https://download.redis.io/releases/redis-6.2.6.tar.gz">https://download.redis.io/releases/redis-6.2.6.tar.gz</a> 稳定版， 上传安装文件</p>
<br>

<p>解压，用gcc编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">解压：</span><br><span class="line">tar -zxvf redis-6.2.6.tar.gz -C /opt/</span><br><span class="line">编译：</span><br><span class="line">cd /opt/redis-6.2.6/</span><br><span class="line">make install   // 自动安装到 /usr/local/bin下</span><br><span class="line"></span><br><span class="line">安装的文件描述：</span><br><span class="line">redis-benchmark：性能测试工具</span><br><span class="line">redis-check-aof：修复aof持久化文件</span><br><span class="line">redis-check-rdb：修复rdb持久化文件</span><br><span class="line">redis-cli：redis命令行工具</span><br><span class="line">redis-sentinel：redis集群哨兵使用</span><br><span class="line">redis-server：启动redis</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>后台启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/redis-6.2.6</span><br><span class="line">cp redis.conf  redis_1.conf</span><br><span class="line"></span><br><span class="line">vim redis_1.conf</span><br><span class="line">将daemonize的no改成yes（查找内容：/+内容 enter n）</span><br><span class="line"></span><br><span class="line">redis-server redis_1.conf</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>启动命令行和退出redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令行启动：</span><br><span class="line">redis-cli</span><br><span class="line"></span><br><span class="line">退出redis:</span><br><span class="line">(1) 先shutdown,再执行exit</span><br><span class="line">(2) 先exit,再杀死redis进程id</span><br></pre></td></tr></table></figure>

<br>

<br></li>
</ol>
<h5 id="五-安装lrzsz"><a href="#五-安装lrzsz" class="headerlink" title="五. 安装lrzsz"></a>五. 安装lrzsz</h5><br>

<p>很多的远程连接工具并没有上传下载的功能，这个时候就需要依赖于lrzsz这个软件了。</p>
<br>

<ol>
<li><p>所有lrzsz安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list lrzsz</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>在线安装lrzsz：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install lrzsz.x86_64</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>输入rz，弹出上传的窗口，选择上传的文件</p>
 <br>

<br></li>
</ol>
<h5 id="六-项目部署"><a href="#六-项目部署" class="headerlink" title="六. 项目部署"></a>六. 项目部署</h5><br>

<p>（1）手动部署项目：</p>
<br>

<ol>
<li><p>打包，利用lrzsz的rz命令上传，运行命令： java -jar 包名 </p>
<br>
</li>
<li><p>那我们关闭命令行，这个时候不炸了吗？🎃，我们可以后台运行项目，将日志输出到日志文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -jar helloworld-1.0-SNAPSHOT.jar &amp;&gt; hello.log &amp;</span><br><span class="line">// nohup: 不挂起</span><br><span class="line">// &amp;: 让命令在后台运行</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>停止项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep java</span><br><span class="line">kill -9 进程号</span><br></pre></td></tr></table></figure>

<br>

<br>

<br></li>
</ol>
<p>（2）基于shell脚本自动部署</p>
<br>

<ol>
<li><p>将idea中的项目代码推送到远程</p>
<br>
</li>
<li><p>下载git, 克隆远程代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list git // 列出git安装包</span><br><span class="line">yum install git // 在线安装git</span><br><span class="line">git --version  // git安装验证</span><br><span class="line"></span><br><span class="line">git clone https://gitee.com/youre-not-as-handsome-as-me/demo.git</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>上传解压maven安装包到 &#x2F;usr&#x2F;local&#x2F;, 在&#x2F;etc&#x2F;profile文件中配置环境变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">修改配置文件，进入到命令模式，按G切换到最后一行，按a/i/o进入插入模式，然后在最后加入如下内容 :</span><br><span class="line">export MAVEN_HOME=/usr/local/apache-maven-3.5.4</span><br><span class="line">export PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">重新加载并验证</span><br><span class="line">source /etc/profile</span><br><span class="line">mvn -v</span><br></pre></td></tr></table></figure>

<br>

<p>在settings.xml配置文件设置本地仓库和私服：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/apache-maven-3.5.4/conf/settings.xml</span><br><span class="line"></span><br><span class="line">&lt;localRepository&gt;/usr/local/repo&lt;/localRepository&gt;</span><br><span class="line"></span><br><span class="line">阿里私服：</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">	&lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>编写shell脚本bootStart.sh执行部署流程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">echo =================================</span><br><span class="line">echo  自动化部署脚本启动</span><br><span class="line">echo =================================</span><br><span class="line"></span><br><span class="line">echo 停止原来运行中的工程</span><br><span class="line">APP_NAME=demo</span><br><span class="line"></span><br><span class="line">tpid=`ps -ef|grep $APP_NAME|grep -v grep|grep -v kill|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">if [ $&#123;tpid&#125; ]; then</span><br><span class="line">    echo &#x27;Stop Process...&#x27;</span><br><span class="line">    kill -15 $tpid</span><br><span class="line">fi</span><br><span class="line">sleep 2</span><br><span class="line">tpid=`ps -ef|grep $APP_NAME|grep -v grep|grep -v kill|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">if [ $&#123;tpid&#125; ]; then</span><br><span class="line">    echo &#x27;Kill Process!&#x27;</span><br><span class="line">    kill -9 $tpid</span><br><span class="line">else</span><br><span class="line">    echo &#x27;Stop Success!&#x27;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo 准备从Git仓库拉取最新代码</span><br><span class="line">cd /usr/local/demo</span><br><span class="line"></span><br><span class="line">echo 开始从Git仓库拉取最新代码</span><br><span class="line">git pull</span><br><span class="line">echo 代码拉取完成</span><br><span class="line"></span><br><span class="line">echo 开始打包</span><br><span class="line">output=`mvn clean package -Dmaven.test.skip=true`</span><br><span class="line"></span><br><span class="line">cd target</span><br><span class="line"></span><br><span class="line">echo 启动项目</span><br><span class="line">nohup java -jar demo-0.0.1-SNAPSHOT.jar &amp;&gt; demo.log &amp;</span><br><span class="line">echo 项目启动完成</span><br></pre></td></tr></table></figure>

<br>

<p>赋予bootStart.sh权限, 执行脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 777 bootStart.sh</span><br><span class="line">sh bootStart.sh</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>面试系列之redis</title>
    <url>/2025/04/28/%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97%E4%B9%8Bredis/</url>
    <content><![CDATA[<p>介绍：redis是一种无关系型数据库，在项目和面试中经常提及，正好开始系统地学redis了，今天我们就以总结的方式开始java面试之redis篇。</p>
<br>

<br>

<h4 id="一-持久化"><a href="#一-持久化" class="headerlink" title="一. 持久化"></a>一. 持久化</h4><br>

<h5 id="（1）Redis-AOF"><a href="#（1）Redis-AOF" class="headerlink" title="（1）Redis AOF"></a>（1）Redis AOF</h5><p>介绍： AOF(append only file) 是一种只记录写操作的日志，redis先执行命令再记录日志，redis不会检查日志，如果.aof日志出现问题的话，通常可以用redis-check-aof 命令进行修复。</p>
<br>

<ol>
<li><p>AOF三种写回策略</p>
<p>在redis执行一个写命令完成后，就记录写日志，这样对redis的性能会有较大的影响，另外如果还没来得及记录记日志，系统就宕机了，会导致数据永久性丢失的问题。为了解决以上两种问题，引入了AOF三种写回策略：</p>
<br>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">always: 同步写回</span><br><span class="line"></span><br><span class="line">everysec: 将日志写入aof日志缓冲区，每隔一秒写入磁盘文件中</span><br><span class="line"></span><br><span class="line">no: 将日志写入aof日志缓冲区，由操作系统决定什么时候写入磁盘文件中</span><br></pre></td></tr></table></figure>

<br>

<p>以上三种策略 no的性能最好，但是可能大量丢失数据。 always大概率不会丢失数据，但性能较差，所以通常会这种采取everysec策略。</p>
<br>
</li>
<li><p>AOF重写机制</p>
<p>随着写操作的数量增多，占用磁盘空间增大，为节省磁盘空间，可以采用AOF重写，即读取redis现有的数据，根据数据创建写操作的日志。可以使用命令 bgrewriteaof, 可以在redis.conf中配置重写的临界条件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>

<br>

<p>了解了重写的目的之后，我们可以看看重写的流程：</p>
<p>bgrewriteaof 命令进行重写，如果当前有重写正在进行就等待，如果没有，就创建一个子进程，这样就不会对主进程造成阻塞，子进程循环遍历redis内存数据到临时文件，在此期间，客户端的写请求会记录到aof缓冲区和aof重写区，确保原aof文件的完整和新的aof文件生成期间不会漏掉增添修改操作，子进程写完新的aof文件后向主进程发送请求，主进程接收请求后aof重写缓冲区的数据写入新的aof文件并且覆盖掉旧的aof文件。</p>
<br></li>
</ol>
<h5 id="（2）Redis-RDB"><a href="#（2）Redis-RDB" class="headerlink" title="（2）Redis RDB"></a>（2）Redis RDB</h5><p>RDB(Redis Database)是一种内存快照，记录内存某一时刻的数据状态。使用命令bgsave，即在主进程外又创建一个子进程，由这个子进程来完成RDB快照，假如内存快照有6GB的内存数据量，需要5s的时间来完成RDB文件的写入，那么在这5s内，仍旧需要将这个时间段内的添加和修改数据的操作写入到RDB文件中，这个时候就用到写时复制技术，对于增添修改操作是通过复制一个副本，子进程再执行，所以子进程是一边写快照，一遍执行主进程的操作，从而防止快照导入RDB文件时数据的丢失。</p>
<br>

<h5 id="（3）混合AOF和RDB"><a href="#（3）混合AOF和RDB" class="headerlink" title="（3）混合AOF和RDB"></a>（3）混合AOF和RDB</h5><p>redis.conf中打开aof，打开混合配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set k1 v1</span><br><span class="line">set k2 v2</span><br><span class="line">set k3 v3</span><br><span class="line">bgrewriteaof</span><br><span class="line">set k4 v4</span><br><span class="line">set k5 v5</span><br></pre></td></tr></table></figure>

<p>以上的执行结果是前三次操作后的RDB快照是aof文件的前一部分，后两个操作是aof文件的后一部分。</p>
<p>如果数据不能丢失，使用AOF和RDB混合是一个好的选择。</p>
<br>

<h4 id="二-主从复制"><a href="#二-主从复制" class="headerlink" title="二. 主从复制"></a>二. 主从复制</h4><br>

<p>简单点说，就是主从库采用读写分离的方式，主库进行写操作并将数据同步给从库，从库只能进行读操作。</p>
<p>这样来提升读取的性能。</p>
<br>

<h6 id="主从同步原理："><a href="#主从同步原理：" class="headerlink" title="主从同步原理："></a>主从同步原理：</h6><ol>
<li>第一阶段： 从库执行 replicaof 命令，主从库建立连接，从库向主库发送psync指令，主库返回给从库唯一标识runID和复制进度offset。</li>
<li>第二阶段：主库向从库发送rdb文件，从库接收并加载rdb文件</li>
<li>第三阶段： 将replication buffer内的数据（即rdb文件生成之后执行的写操作）发送给从库，从库接收并加载。</li>
</ol>
<br>

<p>上面介绍了主从同步部分，那如果只有一个主库的话，从库多了，主库同步给从库的压力就会增大。这个时候就用到<strong>主从从模式</strong>了，即在主从模式的基础上，从库不在replicaof到主库，而是replicaof到其他从库，从而让从库分担数据同步的压力。</p>
<br>

<p>还有一个问题，如果同步过程中网络异常，再次连接导致数据丢失怎么办？redis采用<strong>repl_backlog_buffer缓冲区</strong>记录主库写到的位置和从库读到的位置。这样再次连接时，如果从库读到的位置落后于主库写到的位置，就会从库继续读取直至与后者相同。</p>
<p>缓冲空间大小&#x3D;主库写入速度 * 操作大小-主从库网络传输速度 * 操作大小</p>
<p>repl_backlog_size&#x3D;缓冲空间大小*2</p>
<br>

<br>

<h4 id="三-哨兵模式"><a href="#三-哨兵模式" class="headerlink" title="三. 哨兵模式"></a>三. 哨兵模式</h4><br>

<p>下面是比较简单的哨兵集群的效果图：</p>
<img src="\images\redis\哨兵模式.png" alt="哨兵模式" style="zoom:67%;" />

<br>

<p>我们在虚拟机的centos这一个操作系统模拟哨兵集群： 用redis-server来启动不同接口的redis服务，设置一主二从的关系，在以redis-sentinel启动三个哨兵，哨兵的配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 端口</span><br><span class="line">port 26379</span><br><span class="line">// 监视  格式：sentinel monitor &lt;自定义的reids主节点名称&gt; &lt;IP&gt; &lt;port&gt; &lt;数量&gt;</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br><span class="line">// 主节点多少毫秒未应答，则下线</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br></pre></td></tr></table></figure>

<br>

<h6 id="（1）-联系"><a href="#（1）-联系" class="headerlink" title="（1） 联系"></a>（1） 联系</h6><p>好，现在基本的服务都启动了，那么有一个问题，每个哨兵都监视主库，那哨兵是如何知道彼此的？哨兵又是如何监视从库的？</p>
<ol>
<li><p>是通过redis的pub&#x2F;sub发布订阅机制实现哨兵的联系，主库master有一条_sentinel__:hello的专用通道，用于哨兵之间订阅发送消息。就好像是master建了一个微信群，哨兵可以发送消息，可以看到其他哨兵的消息。</p>
</li>
<li><p>哨兵向主库master发送info命令，主库将从库列表返回给哨兵，哨兵和从库建立和从库建立连接，监视从库。</p>
<br></li>
</ol>
<h6 id="（2）运行"><a href="#（2）运行" class="headerlink" title="（2）运行"></a>（2）运行</h6><p>介绍完联系之后看看如果主库宕机，哨兵集群如何判断主库宕机的？是如何选取新的主库的？</p>
<p>判断主库宕机和选取新的主库的过程都设计到哨兵少数服从多数的原则，所以哨兵的数量应该是奇数更合适，主库被哨兵集群监控，多数哨兵判断主库下线了，那认为主库宕机了，这个时候要选取新的主库，那由那个哨兵来进行呢，这个时候依旧是少数服从多数，得到多数投票的那个哨兵来选取新的主库，选取新的主库有三个筛选条件，一是选取每个从库配置中优先级最大的那个，这通常意味着这个从库的配置更高，内存更大。二是选取repl_backlog_buffer缓冲区中和主库写操作的位置最接近的那个从库。三是每个redis实例都有一个id,选择id最小的。</p>
<br>

<br>

<br>

<h4 id="四-分片集群"><a href="#四-分片集群" class="headerlink" title="四. 分片集群"></a>四. 分片集群</h4><br>

<h6 id="（1）配置"><a href="#（1）配置" class="headerlink" title="（1）配置"></a>（1）配置</h6><p>我们依旧在同一个虚拟主机完成，redis-server启动六个接口的redis服务, 配置文件如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include redis.conf</span><br><span class="line">pidfile &quot;/var/run/redis_6379.pid&quot;</span><br><span class="line">port 6379</span><br><span class="line">dbfilename &quot;dump6379.rdb&quot;</span><br><span class="line"></span><br><span class="line"># 打开集群模式</span><br><span class="line">cluster-enabled yes</span><br><span class="line"># 设定节点配置文件</span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line"># 设置节点失联时间，超过，会自动进行主从切换</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure>

<p>修改redis.conf文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind 127.0.0.1 192.168.230.30(虚拟主机ip)</span><br></pre></td></tr></table></figure>

<p>六个服务启动</p>
<p>六个服务合成一个集群：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create --cluster-replicas 1 192.168.230.30:6379</span><br><span class="line">192.168.230.30:6380 192.168.230.30:6381 192.168.230.30:6579 192.168.230.30:6580</span><br><span class="line">192.168.230.30:6581</span><br><span class="line">// --cluster create: hash slot平均分配到实例中</span><br><span class="line">// --cluster-replicas 1: 主从比例1:1</span><br></pre></td></tr></table></figure>

<br>

<h6 id="（2）原理以及常用命令"><a href="#（2）原理以及常用命令" class="headerlink" title="（2）原理以及常用命令"></a>（2）原理以及常用命令</h6><p>一个分片集群有16384个槽，我们向集群中存储键值对的时候，根据键值对的key, 按照CRC16算法计算出一个16bit的值，用这个值对16384取模运算，得到的数代表对应的编号的哈希槽hash slot。</p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli -c -p 6379</span><br><span class="line">// 四大数据类型，bitmap,HyperLogLog 操作</span><br><span class="line">cluster nodes // 显示集群各个节点信息</span><br><span class="line">cluster keyslot &lt;key&gt;</span><br><span class="line">cluster countkeyinslot &lt;slot&gt;</span><br><span class="line">cluster getkeysinslot &lt;slot&gt; &lt;count&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>因为主从比例为1:1，所以如果其中一个节点的主库宕机，从库就会接手，当如果该节点主从库全部宕机的话，默认整个集群都挂掉。默认配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cluster-require-full-coverage yes</span><br></pre></td></tr></table></figure>

<p>如果配置为no的话，只有该节点不可存取数据，整个集群不会挂掉。</p>
<br>

<br>

<h4 id="五-Geospatial"><a href="#五-Geospatial" class="headerlink" title="五. Geospatial"></a>五. Geospatial</h4><br>

<p>通常用于表示坐标相关数据，可以计算坐标距离呀，一个坐标范围内的其他坐标呀，可以看做是redis第六种数据结构了，基于zset有序集合，值得注意的是它的分数是由坐标计算而来。</p>
<br>

<h6 id="（1）geo原理"><a href="#（1）geo原理" class="headerlink" title="（1）geo原理"></a>（1）geo原理</h6><p>geo是如何根据坐标计算分数的？答案便是GEOHash编码，将经纬度分别进行编码，再交叉合并，合并的值作为geo元素的权重。  </p>
<br>

<ol>
<li><p>经纬度编码：做N次二分区，比如经度为135，做第一次二分区，判断是位于[-180, 0)还是[0, 180], 左分区用0表示，右分区用1表示，135位于右分区，用1表示，所以最后获得了N位0或1组成的编码。</p>
</li>
<li><p>交叉合并: 合并的结果第一位是经度编码的第一位，结果的第二位是纬度编码的第一位，就这样经纬度交叉进行。</p>
<br></li>
</ol>
<h6 id="（2）geo应用"><a href="#（2）geo应用" class="headerlink" title="（2）geo应用"></a>（2）geo应用</h6><ol>
<li><p>计算两个位置的距离</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geodist key member1 member2</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>获取附近的geo元素</p>
<p>如获取距离自己500m以内的女神姓名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">georadius key 自己位置信息 500 m [ASC|DESC] [count number]</span><br></pre></td></tr></table></figure>

<p>可以理解为将二维位置映射到一维的线上，距离较近的两个点，实际距离也是比较近的。</p>
<br>

<br></li>
</ol>
<h4 id="六-事务"><a href="#六-事务" class="headerlink" title="六. 事务"></a>六. 事务</h4><br>

<p>redis事务分为原子性，一致性，隔离性和持久性。</p>
<br>

<ol>
<li><p>原子性：事务中所有的指令要么都执行，要么都不执行。</p>
<p>可以根据错误的发生时机分为EXEC命令执行前报错，执行时发生故障，执行后报错这三种情况来讨论，在错误命令入队时，redis就会报错并记录这个错误，其他命令还能接着入队，到执行EXEC命令时，就会报错，整个事务就不能执行。如果EXEC命令执行前没报错，执行时发生故障，只有部分事务记录到AOF日志文件中，这个时候就可以使用redis-check-aof工具将未完成的事务从日志中删除，从而保证原子性。如果前两者都没问题，到了执行后报错，那这个时候大多数都是事务中执行的指令一般都和操作类型不匹配才导致报错，正确的指令能执行，错误的指令无法执行，因为redis不支持回滚，所以这个时候就无法保证原子性了。</p>
<br>
</li>
<li><p>一致性：事务执行前后，数据库状态保持一致，符合预期的规则和约束，比如说主外键关联，完整性约束等一些数据库内部规则不能被破坏。</p>
<p>执行前，入队报错，事务不执行，能确保一致性。执行时故障，一致性和数据恢复方式有关：如果只开启RDB快照，事务操作的结果没有被保存到快照中，实例重启时，数据是一致的。如果开启了RDB和AOF日志，部分操作被记录到AOF日志中，可以使用redis-check-aof清除事务中已经完成的操作保证事务的原子性，从而保证了一致性。如果EXEC命令执行后报错，正确的指令已经执行，错误的指令没有执行，可以保证一致性。</p>
<br>
</li>
<li><p>隔离性：多个事务并行执行时，互不干扰。</p>
<p>并发操作在EXEC命令执行前执行，需要通过WATCH机制进行保证，WATCH机制的作用是监视该事务操作的一个或多个键是否被其他事务修改，如果被修改，就放弃执行该事务从而保证事务的隔离性。并发操作在EXEC命令执行后执行不会破坏事务的隔离性，因为redis使用单线程执行命令，而且执行完命令，它还会保证前一个事务的所有命令执行完之后才会执行之后的事务。</p>
<br>
</li>
<li><p>持久性：</p>
<p>没有使用RDB和AOF，数据丢失</p>
<p>只使用RDB快照，那么在事务执行之后，快照执行之前发生宕机，也会数据丢失，采用了RDB和AOF，AOF的三种配置选项no, everysec和always也会出现数据丢失的情况，所以事务的持久性不能保证。</p>
<br>

<br>

<p>redis的事务可以保证一致性和隔离性，具备一定的原子性但不支持回滚，无法保证持久性。</p>
<br>

<br></li>
</ol>
<h4 id="七-缓存"><a href="#七-缓存" class="headerlink" title="七. 缓存"></a>七. 缓存</h4><p>redis缓存属于旁路型缓存，一般有两种情况：缓存命中和缓存缺失，两种类型：只读缓存和读写缓存。</p>
<p>读取数据时如果缓存命中，直接返回，如果缓存缺失，向数据库访问，并刷新缓存。向缓存写数据时，缓存将数据刷新给数据库时可以同步直写，也可以异步写回。</p>
<br>

<h5 id="（1）缓存数据的删除"><a href="#（1）缓存数据的删除" class="headerlink" title="（1）缓存数据的删除"></a>（1）缓存数据的删除</h5><ol>
<li><h6 id="删除策略"><a href="#删除策略" class="headerlink" title="删除策略"></a>删除策略</h6></li>
</ol>
<p>缓存数据的删除大多情况下都是过期数据的删除，redis中删除过期数据有两种策略：惰性删除和定期删除。惰性删除是数据过期了，当再次访问该数据时使用内部函数expirelfNeeded进行判断，如果过期，进行删除，节约CPU资源但内存占用大。定期删除是每隔一段时间调用函数抽取20个key进行检测，删除过期的key，如果过期的key的数量大于25%，那就循环执行，最多执行N次，这个N是可以设置的。</p>
<br>

<ol start="2">
<li><h6 id="淘汰策略"><a href="#淘汰策略" class="headerlink" title="淘汰策略"></a>淘汰策略</h6></li>
</ol>
<p>那么当缓存的数据超过缓存的容量时，该如何是好？这个时候就要用到逐出算法了，制定缓存淘汰策略。</p>
<br>

<p>针对过期数据的淘汰策略有四种：</p>
<p>valotile-ttl : 按照过期时间的先后顺序删除</p>
<p>valotile-random: 随机删除</p>
<p>valotile-lru: 使用LRU算法筛选过期的键值对删除</p>
<p>valotile-lfu: 使用LFU算法筛选过期的键值对删除</p>
<br>

<p>针对所有数据有三种：allkeys-random   allkeys-lru   allkeys-lfu</p>
<br>

<p>LRU算法是将最近不用的数据筛选出来。需要维护一个链表来管理所有的缓存数据，数据被访问时，执行链表数据的移动，利用链表的顺序筛序出N个数据，再将最小的数据淘汰。</p>
<p>LFU算法是将使用频率最小的数据筛选出来。每个数据块都有一个引用计数，维护一个队列将数据块进行排序，淘汰数据时，把队列尾部的数据块删除。</p>
<br>

<p>过期数据淘汰是根据具体情况选用，所有数据淘汰一般情况下用allkeys-lru策略，如果数据的使用频率相差不大，也可以用allkeys-random策略。</p>
<br>

<h5 id="（2）缓存异常"><a href="#（2）缓存异常" class="headerlink" title="（2）缓存异常"></a>（2）缓存异常</h5><ol>
<li><p>数据不一致：</p>
<p>就是数据更新，读取到的依然是旧值。通常是由两种情况导致，一种是缓存删除了，但是数据更新失败，一种是数据更新成功，但是缓存删除失败。</p>
<p>解决方案：就是利用重试机制，把要删除的缓存值或者更新数据库值先存储到消息队列中，出现数据不一致，就重试。</p>
<br>

<p>如果是多线程访问，分为两种情况讨论，如果是先删除缓存，后更新数据，那么一个缓存在执行到数据更新的过程中，另一个线程访问数据拿到的依然是旧值，并且还会刷新缓存，就下来的其他所有线程拿到的都是旧数据。为了避免后续的线程拿到的都是旧数据，就会用到延迟双删，这个延迟双删其实就是线程执行完删除缓存和更新数据之后，休眠一段时间，休眠结束就再次删除缓存，这样之后的其他线程访问数据时，拿到的就是新值。如果是第二种情况，先更新数据，再删除缓存，那么在线程更新数据这一时间内，其他线程拿到的是旧数据，更新并且删除缓存完成后的其他线程拿到的是新数据。</p>
<br>

<br>
</li>
<li><p>缓存击穿</p>
<p>要读取的数据在数据库中存在，在缓存中已经过期，从数据库读取的数据刷新到缓存中，这种情况叫做缓存击穿。</p>
<br>

<p>那么如果大量数据同时过期，这些数据又同时被访问，那么就会对数据库造成较大压力。</p>
<p>解决方案：</p>
<p>对于热点数据不设置过期值，或者对于在设置过期时间的时候再加上一个随机时间，让过期时间不同，避免同时过期。至于不同时过期的情况，可以使用redis删除过期数据两种策略之一的定期删除。也可以采用预热的方式，即将热门数据提前存入缓存。还可以使用锁，缓存失效时，不是直接访问数据库，而是只有获取一个分布式锁才能访问数据库，如果不能获取分布式锁，说明已经有线程在执行，这个时候就休眠一段时间，在去获取分布式锁。</p>
<br>

<br>
</li>
<li><p>缓存穿透</p>
<p>要读取的数据在缓存中没有，在数据库中也没有。每次都会穿透到数据库，缓存成了摆设，增大数据库的压力。</p>
<br>

<p>解决方案：</p>
<p>可以设立缺省值，发现缓存穿透的数据就设立一个缺省值，后续访问时返回空值。</p>
<p>还可以用布隆过滤器，就是数据写入数据库时，将数据的 id 存入布隆过滤器中， 读取数据时在过滤器中查找数据 id ，如果没有就不会到数据库中查询。布隆过滤器的算法就是维护一个bit类型的数组，写入数据 id ，使用三个hash函数，一个id映射到三个位置并存入1，查询 id，如果这个id映射的三个位置有0，那么id不存在。所以布隆过滤器判断id存在时，id可能存在，判断id不存在时，id就不可能存在。</p>
<br>

<br>
</li>
<li><p>缓存雪崩</p>
<p>大量请求无法在缓存中处理，全部打到数据库中致使数据库压力剧增甚至宕机。一个redis实例支持10万的QPS，而一个数据库实例一般只有1000QPS。和缓存击穿相似的一点是缓存都无效，区别于缓存击穿的一点是缓存雪崩是大量数据同时失效，缓存击穿是某个热点数据失效。有两种情况：大量数据同时过期，redis宕机</p>
<br>

<p>解决方案：</p>
<p>设置过期时间时再加上一个随机时间，防止大量数据同时过期。也可以进行接口限流，减小数据库压力。</p>
<p>对于redis宕机引发的缓存雪崩的解决方案是：限流和服务熔断。服务熔断指的是从缓存获取数据异常就直接返回错误给前端，防止打到数据库。当然，最好的方法就是构建高可用的缓存集群，主库宕机，从库接替主库。</p>
<br>

<br></li>
</ol>
<h4 id="八-jedis"><a href="#八-jedis" class="headerlink" title="八. jedis"></a>八. jedis</h4><br>

<p>springbot 引入 jedis 依赖包，利用 Jedis 对象来连接redis和操作redis数据。</p>
<br>

<p>这里讲讲 redis 五大基本数据类型，geo的常用命令，增删改查的顺序：</p>
<br>

<h5 id="（1）redis-五大基本数据类型"><a href="#（1）redis-五大基本数据类型" class="headerlink" title="（1）redis 五大基本数据类型"></a>（1）redis 五大基本数据类型</h5><ol>
<li>String: [set, setnx, setex, setrange, mset, msetnx]  [unlink, del] [append, incr, decr, incrby, decrby] [get, mget, getrange, substr, strlen]</li>
<li>List(双向链表): [lpush, rpush, lpushx, linsert]  [lpop, rpop, lrem, brpop]  [lset]  [lrange, lindex, llen]</li>
<li>Hash: [hset, hsetnx, ]  [hdel]  [hincrby, hincrbyfloat]  [hget, hmget, hgetall, hexists, hkeys,hvals,hlen]</li>
<li>Set: [sadd, ]  [spop, srem, smove ]  []  [amembers, sismember, scard, srandmember, sinter, sunion, sdiff, sinterstore]</li>
<li>zset: [zadd]  [zrem]  [zincrby]  [zrange, zrevrange, zrangebyscore, zrevrangebyscore, zrangebylex, zcard, zcount, zrank, zscore]</li>
</ol>
<br>

<h5 id="（2）geo"><a href="#（2）geo" class="headerlink" title="（2）geo"></a>（2）geo</h5><p>geoadd &lt; key&gt; &lt; longitude&gt;&lt; latitude&gt;&lt; member&gt;</p>
<p>geopos &lt; key&gt;&lt; member&gt; [&lt; member&gt;…]</p>
<p>geodist &lt; key&gt;&lt; member1&gt;&lt; member2&gt;</p>
<p>georadius &lt; key&gt;&lt; longitude&gt; &lt; latitue&gt; radius [m | km| fm| mi] count number</p>
]]></content>
      <categories>
        <category>java面试</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
</search>
